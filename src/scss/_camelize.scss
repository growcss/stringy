@charset "UTF-8";

// Returns a camelCase version of the string.
// Trims surrounding spaces, capitalizes letters following digits, spaces, dashes and underscores, and removes spaces, dashes, as well as underscores.
//
// @param {string} $string
//
// @return {string}
// - - - - - - - - - - - - - - - - - - - - - - - - -
@function camelize($string) {
  $string: unquote($string);

  @if type-of($string) != "string" {
    @error "`camelize` function expecting a string for $string; #{type-of($string)} given.";
  }

  $progress: $string;
  $result: "";
  $exclude: " ", "-", "–", "—", "_", ",", ";", ":", ".";

  @while str-length($progress) > 0 {
    $char: str-slice($progress, 1, 1);

    @if contain($exclude, $char) {
      $progress: capitalize(str-slice($progress, 2, 2)) + str-slice($progress, 3);
    } @else {
      $result: $result + $char;
      $progress: str-slice($progress, 2);
    }
  }

  @return $result;
}
